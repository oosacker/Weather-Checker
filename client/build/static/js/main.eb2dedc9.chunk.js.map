{"version":3,"sources":["App.js","index.js"],"names":["App","useState","weatherData","setWeather","currentCity","setCurrentCity","currentCountry","setCurrentCountry","countryList","setcountryList","cityList","setcityList","useEffect","fetchCountries","console","log","fetchCities","fetchWeather","fetch","then","response","json","data","catch","error","alert","requestOptions","method","headers","body","JSON","stringify","country_code","code","city_id","id","className","align","justify","Autocomplete","options","getOptionLabel","country","name","style","width","renderInput","params","TextField","label","variant","onChange","event","value","reason","city","main","toUpperCase","temp","feels_like","humidity","src","weather","icon","description","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.eb2dedc9.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\r\nimport { Container, Row, Col } from 'react-grid-system';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Autocomplete from '@material-ui/lab/Autocomplete';\r\nimport './styles/output.css';\r\n\r\nconst App = () => {\r\n  const [weatherData, setWeather] = useState([]);\r\n  const [currentCity, setCurrentCity] = useState([]);\r\n  const [currentCountry, setCurrentCountry] = useState([]);\r\n  const [countryList, setcountryList] = useState([]);\r\n  const [cityList, setcityList] = useState([]);\r\n\r\n  useEffect( () => {\r\n    fetchCountries();\r\n  }, []);\r\n\r\n  useEffect( () => {\r\n    console.log(`currentCountry`, currentCountry);\r\n    fetchCities();\r\n  }, [currentCountry]);\r\n\r\n  useEffect( () => {\r\n    console.log(`currentCity`, currentCity);\r\n    fetchWeather();\r\n  }, [currentCity]);\r\n\r\n  useEffect( () => {\r\n    console.log(`weatherData`, weatherData);\r\n  }, [weatherData]);\r\n\r\n\r\n  const fetchCountries = () => {\r\n    fetch('/get_countries')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setcountryList(data);\r\n      })\r\n      .catch(error => {\r\n        alert(error); \r\n      });\r\n  }\r\n\r\n  const fetchCities = () => {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ country_code: currentCountry.code })\r\n    };\r\n    fetch('/get_cities', requestOptions)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setcityList(data);\r\n      })\r\n      .catch(error => {\r\n        alert(error); \r\n      });\r\n  }\r\n\r\n  const fetchWeather = () => {\r\n    const requestOptions = {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify({ city_id: currentCity.id })\r\n    };\r\n\r\n    fetch('/get_weather', requestOptions)\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setWeather(data);\r\n      })\r\n      .catch(error => {\r\n        alert(error);\r\n      });\r\n  }\r\n\r\n\r\n  const handleCountrySelect = (event, value, reason)=> {\r\n    if(value) {\r\n      setCurrentCountry(value);\r\n    }\r\n    else {\r\n      console.log('no country selected');\r\n    }\r\n  }\r\n\r\n  const handleCitySelect = (event, value, reason)=> {\r\n    if(value) {\r\n      setCurrentCity(value);\r\n    }\r\n    else {\r\n      console.log('no city selected');\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Container className={'main-container'}>\r\n\r\n      <Container className={'title-box'}>\r\n        <h1 className={'title'}>Weather Checker v2</h1>\r\n        <h3 className={'sub-title'}>Natsuki Hasegawa, 2020</h3>\r\n        <p>A simple web app that demonstrates a Node.js/Express backend server and a React frontend. The backend fetches the weather data for the selected city from OpenWeatherMap's API. The backend itself also implements a RESTful API for the frontend interface.</p>\r\n      </Container>\r\n    \r\n      <Container className={'selection-box'}>\r\n      {countryList && (\r\n        <Row align={'center'} justify={'center'} className={'row-1'}>\r\n          <Autocomplete\r\n            options={countryList}\r\n            getOptionLabel={(country) => country.name}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Select Country\" variant=\"outlined\" />}\r\n            onChange={handleCountrySelect}\r\n          />\r\n        </Row>\r\n      )}\r\n\r\n      {cityList && (\r\n        <Row align={'center'} justify={'center'} className={'row-2'}>\r\n          <Autocomplete\r\n            options={cityList}\r\n            getOptionLabel={(city) => city.name}\r\n            style={{ width: 300 }}\r\n            renderInput={(params) => <TextField {...params} label=\"Select City\" variant=\"outlined\" />}\r\n            onChange={handleCitySelect}\r\n          />\r\n        </Row>\r\n      )}\r\n      </Container>\r\n\r\n      {weatherData.main && (\r\n        <Container className={'weather-result'}>\r\n          <Row align={'center'} justify={'center'} className={'row-3'}>\r\n            <Container className={'weather-result-inner'}>\r\n              <h3 className={'city-name'}>{weatherData.name.toUpperCase()}</h3>\r\n              <p>Temperature: {weatherData.main.temp} degC</p>\r\n              <p>Feels like: {weatherData.main.feels_like} degC</p>\r\n              <p>Humidity: {weatherData.main.humidity} %</p>\r\n              <div className='weather-icon-container'>\r\n                <img \r\n                  className={'weather-icon'} \r\n                  src={`http://openweathermap.org/img/wn/${weatherData.weather[0].icon}.png`}>\r\n                </img>\r\n              </div>\r\n              <p>{weatherData.weather[0].main +': '+ weatherData.weather[0].description} </p>\r\n            </Container>\r\n          </Row>\r\n        </Container>\r\n      )}\r\n\r\n    </Container>\r\n  )\r\n}\r\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />, document.getElementById('root')\n);"],"sourceRoot":""}